/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * V1.0
 */
 /*History
 *Date                  Modification                                 Reason
 *
 */

#ifndef _SENSOR_ov16e10_MIPI_RAW_H_
#define _SENSOR_ov16e10_MIPI_RAW_H_


#include <utils/Log.h>
#include "sensor.h"
#include "jpeg_exif_header.h"
#include "sensor_drv_u.h"
#include "sensor_raw.h"

//#include "parameters/sensor_ov16e10_raw_param_main.c"

//#define FEATURE_OTP

#define VENDOR_NUM 				1
#define SENSOR_NAME			   "ov16e10_mipi_raw"
#define I2C_SLAVE_ADDR 			0x6c 		/* 8bit slave address*/
//#define MAJOR_I2C_SLAVE_ADDR 0x6c
//#define MINOR_I2C_SLAVE_ADDR 0x20


#define ov16e10_PID_ADDR			  0x300B
#define ov16e10_PID_VALUE                       0x16
#define ov16e10_VER_ADDR			  0x300C
#define ov16e10_VER_VALUE                      0x45

/* sensor parameters begin */

/* effective sensor output image size */
#define VIDEO_WIDTH				1920
#define VIDEO_HEIGHT			         1080
#define PREVIEW_WIDTH			2304
#define PREVIEW_HEIGHT			1728
#define SNAPSHOT_WIDTH			4608
#define SNAPSHOT_HEIGHT			3456

/*Raw Trim parameters*/
#define VIDEO_TRIM_X			         0
#define VIDEO_TRIM_Y			         0
#define VIDEO_TRIM_W			         VIDEO_WIDTH
#define VIDEO_TRIM_H			         VIDEO_HEIGHT
#define PREVIEW_TRIM_X			0
#define PREVIEW_TRIM_Y			0
#define PREVIEW_TRIM_W			PREVIEW_WIDTH
#define PREVIEW_TRIM_H			PREVIEW_HEIGHT
#define SNAPSHOT_TRIM_X			0
#define SNAPSHOT_TRIM_Y			0
#define SNAPSHOT_TRIM_W			SNAPSHOT_WIDTH
#define SNAPSHOT_TRIM_H			SNAPSHOT_HEIGHT

/*Mipi output*/
#define LANE_NUM			4
#define RAW_BITS			10

#define VIDEO_MIPI_PER_LANE_BPS	  	  1512  /* 2*Mipi clk */
#define PREVIEW_MIPI_PER_LANE_BPS	           1512  /* 2*Mipi clk */
#define SNAPSHOT_MIPI_PER_LANE_BPS	  1512  /* 2*Mipi clk */

/*line time unit: 1ns*/
#define VIDEO_LINE_TIME		  	  7335
#define PREVIEW_LINE_TIME		           9004
#define SNAPSHOT_LINE_TIME		  9000

/* frame length*/
#define VIDEO_FRAME_LENGTH		         1136
#define PREVIEW_FRAME_LENGTH		3702
#define SNAPSHOT_FRAME_LENGTH		3702

/* please ref your spec */
#define FRAME_OFFSET				16
#define SENSOR_MAX_GAIN			0x0f80 /*15.5x*/
#define SENSOR_BASE_GAIN			0x0100 /*1x*/
#define SENSOR_MIN_SHUTTER		8

/* please ref your spec
 * 1 : average binning
 * 2 : sum-average binning
 * 4 : sum binning
 */
#define BINNING_FACTOR			1

/* please ref spec
 * 1: sensor auto caculate
 * 0: driver caculate
 */
/* sensor parameters end */

/* isp parameters, please don't change it*/
#define ISP_BASE_GAIN			0x80

/* please don't change it */
#define EX_MCLK				24

/*==============================================================================
 * Description:
 * register setting
 *============================================================================*/

static const SENSOR_REG_T ov16e10_init_setting[] = {
	//Sensor Information////////////////////////////
	//Sensor	  : xxx                            
	//Date		  : 2017-04-06                       
	//Customer        : SPRD_validation                                            
	//MCLK	          : 24MHz                   
	//MIPI            : 4 Lane                                   
	//Pixel order 	  : B 1st            
	//BLC offset	  : 64code                       
	//Firmware Ver.   : v1.0                         
	////////////////////////////////////////////////
    {0x0103,  0x01}, 
    {0x0102,  0x01}, 
    {0x0300,  0xfd}, 
    {0x0304,  0xfc}, 
    {0x0305,  0x00}, 
    {0x030b,  0x05}, 
    {0x030c,  0x01}, 
    {0x030d,  0xb0},
    {0x030e,  0x00}, 
    {0x030f,  0x07}, 
    {0x0311,  0x01}, 
    {0x0314,  0x05}, 
    {0x0315,  0x01}, 
    {0x0316,  0xb0}, 
    {0x0318,  0x00}, 
    {0x0319,  0x00}, 
    {0x031c,  0x0f}, 
    {0x031d,  0x01}, 
    {0x0320,  0x15}, 
    {0x0321,  0x07}, 
    {0x0324,  0x00}, 
    {0x300e,  0x22}, 
    {0x3012,  0x41}, 
    {0x3016,  0xb4}, 
    {0x3017,  0xf0}, 
    {0x3018,  0xf0}, 
    {0x3019,  0xd2}, 
    {0x301b,  0x16}, 
    {0x301e,  0x98}, 
    {0x3022,  0xd0}, 
    {0x3025,  0x03}, 
    {0x3026,  0x10}, 
    {0x3027,  0x08}, 
    {0x3028,  0xc3}, 
    {0x3032,  0xc1}, 
    {0x3103,  0x0e}, 
    {0x3106,  0x00}, 
    {0x3400,  0x04}, 
    {0x3408,  0x03}, 
    {0x340c,  0xff}, 
    {0x3410,  0x00}, 
    {0x3412,  0x00}, 
    {0x3413,  0x00},
    {0x3414,  0x00}, 
    {0x3415,  0x00}, 
    {0x3421,  0x08}, 
    {0x3423,  0x11}, 
    {0x3424,  0x40}, 
    {0x3425,  0x10}, 
    {0x3426,  0x11}, 
    {0x3501,  0x0e}, 
    {0x3502,  0x53}, 
    {0x3504,  0x08}, 
    {0x3508,  0x01}, 
    {0x3509,  0x00}, 
    {0x350a,  0x01}, 
    {0x350b,  0x00}, 
    {0x350c,  0x00}, 
    {0x3548,  0x01}, 
    {0x3549,  0x00}, 
    {0x354a,  0x01}, 
    {0x354b,  0x00}, 
    {0x354c,  0x00}, 
    {0x3603,  0x0f}, 
    {0x3608,  0xac}, 
    {0x3609,  0xc0}, 
    {0x360c,  0x00}, 
    {0x3619,  0x80}, 
    {0x361a,  0x00}, 
    {0x361b,  0x8a}, 
    {0x361c,  0x80}, 
    {0x361d,  0x00}, 
    {0x361e,  0x85},
    {0x3620,  0x48}, 
    {0x3621,  0x10}, 
    {0x3622,  0x99}, 
    {0x3623,  0x77}, 
    {0x3624,  0xff}, 
    {0x3625,  0xff}, 
    {0x3626,  0x02}, 
    {0x3627,  0x33}, 
    {0x3628,  0x77}, 
    {0x3629,  0x09}, 
    {0x362b,  0x03}, 
    {0x362d,  0x03}, 
    {0x3631,  0xf2}, 
    {0x3633,  0x08}, 
    {0x3634,  0x10}, 
    {0x3635,  0x10}, 
    {0x3636,  0x10}, 
    {0x3637,  0xcc}, 
    {0x3638,  0xcc}, 
    {0x3639,  0xc0}, 
    {0x363a,  0xcc}, 
    {0x3653,  0x00}, 
    {0x3644,  0x40}, 
    {0x3664,  0x43}, 
    {0x360a,  0x09}, 
    {0x360b,  0x1c}, 
    {0x3632,  0xf2}, 
    {0x363b,  0x10}, 
    {0x363c,  0x1a}, 
    {0x363d,  0x2d}, 
    {0x363e,  0x58}, 
    {0x3700,  0x32},
    {0x3701,  0x18}, 
    {0x3702,  0x40}, 
    {0x3703,  0x2d}, 
    {0x3704,  0x18}, 
    {0x3705,  0x00}, 
    {0x3706,  0x32}, 
    {0x3707,  0x05}, 
    {0x3708,  0x29}, 
    {0x3709,  0x9b}, 
    {0x370a,  0x00}, 
    {0x370b,  0x82}, 
    {0x370c,  0x08}, 
    {0x3711,  0x40}, 
    {0x3712,  0x01}, 
    {0x3714,  0x67}, 
    {0x3716,  0x44}, 
    {0x3717,  0x01}, 
    {0x3718,  0x13}, 
    {0x3719,  0x11}, 
    {0x371a,  0x1c}, 
    {0x371b,  0x90}, 
    {0x371c,  0x02}, 
    {0x371d,  0x18}, 
    {0x371e,  0x13}, 
    {0x371f,  0x08}, 
    {0x3721,  0x0e}, 
    {0x3722,  0x04}, 
    {0x3723,  0x00}, 
    {0x3724,  0x05}, 
    {0x3725,  0x21}, 
    {0x3727,  0x23}, 
    {0x3728,  0x11}, 
    {0x3730,  0x04}, 
    {0x3731,  0x04},
    {0x3732,  0x04}, 
    {0x3733,  0x04}, 
    {0x3734,  0x04}, 
    {0x3735,  0x04}, 
    {0x3736,  0x07}, 
    {0x3737,  0x01}, 
    {0x3738,  0x07}, 
    {0x3739,  0x01}, 
    {0x373a,  0x07}, 
    {0x373b,  0x03}, 
    {0x373c,  0x07}, 
    {0x373d,  0x07}, 
    {0x373e,  0x07}, 
    {0x373f,  0x18}, 
    {0x3740,  0x04}, 
    {0x3741,  0x02}, 
    {0x3742,  0x04}, 
    {0x3743,  0x07}, 
    {0x3744,  0x15}, 
    {0x3745,  0x07}, 
    {0x3746,  0x15},
    {0x3747,  0x36}, 
    {0x3748,  0x00}, 
    {0x3749,  0xa2}, 
    {0x374a,  0x0d}, 
    {0x374b,  0x23}, 
    {0x374d,  0x17}, 
    {0x374e,  0x2a}, 
    {0x374f,  0x07}, 
    {0x3751,  0x04}, 
    {0x3752,  0x00}, 
    {0x3753,  0x00}, 
    {0x3754,  0xee}, 
    {0x374c,  0x00}, 
    {0x375b,  0x00}, 
    {0x375c,  0x00}, 
    {0x375d,  0x00}, 
    {0x3760,  0x08}, 
    {0x3761,  0x10}, 
    {0x3762,  0x08}, 
    {0x3763,  0x08}, 
    {0x3764,  0x08}, 
    {0x3765,  0x10}, 
    {0x3766,  0x18}, 
    {0x3767,  0x28}, 
    {0x3768,  0x00}, 
    {0x3769,  0x08}, 
    {0x376a,  0x10},
    {0x376b,  0x00}, 
    {0x3770,  0x20}, 
    {0x3773,  0x2b}, 
    {0x3774,  0x38}, 
    {0x3775,  0x2d}, 
    {0x3776,  0x08}, 
    {0x3777,  0x02}, 
    {0x3778,  0x37},
    {0x3779,  0x12}, 
    {0x377a,  0x0d}, 
    {0x377b,  0x2d}, 
    {0x377c,  0x09}, 
    {0x377d,  0x02}, 
    {0x377e,  0x04}, 
    {0x377f,  0x02}, 
    {0x3798,  0x00}, 
    {0x3781,  0x00}, 
    {0x379b,  0x0a}, 
    {0x379c,  0x0a}, 
    {0x379d,  0x0a}, 
    {0x379e,  0x20}, 
    {0x379f,  0x20}, 
    {0x37a0,  0x08}, 
    {0x37a1,  0x08}, 
    {0x37a2,  0x02}, 
    {0x37a3,  0x08}, 
    {0x37a4,  0x02}, 
    {0x37a5,  0x2f}, 
    {0x37a6,  0x0a}, 
    {0x37a7,  0x05}, 
    {0x37a8,  0x05}, 
    {0x37a9,  0x05}, 
    {0x37aa,  0x05}, 
    {0x37ab,  0x09}, 
    {0x37ac,  0x0d}, 
    {0x37ad,  0x0d}, 
    {0x37ae,  0x0d}, 
    {0x37b0,  0x38}, 
    {0x37b1,  0x38}, 
    {0x37b2,  0x0e}, 
    {0x37b3,  0x40}, 
    {0x37b4,  0x40}, 
    {0x37b5,  0x1c}, 
    {0x37b6,  0x00}, 
    {0x37b7,  0x00}, 
    {0x37b8,  0x00}, 
    {0x37b9,  0x00}, 
    {0x37ba,  0x00}, 
    {0x37bc,  0x00}, 
    {0x37bd,  0x00}, 
    {0x37be,  0x00}, 
    {0x37bf,  0x00}, 
    {0x37c0,  0x04}, 
    {0x37c1,  0x01}, 
    {0x37c2,  0x02}, 
    {0x37c3,  0x04}, 
    {0x37c4,  0x02}, 
    {0x37c5,  0x04}, 
    {0x37c8,  0x02}, 
    {0x37c9,  0x02}, 
    {0x37cc,  0xf0}, 
    {0x37cd,  0x01}, 
    {0x37ce,  0x07}, 
    {0x37cf,  0x01}, 
    {0x37d0,  0x07}, 
    {0x37d1,  0x01}, 
    {0x37d2,  0x07}, 
    {0x37d3,  0x01}, 
    {0x37d4,  0x02}, 
    {0x37d5,  0x0a}, 
    {0x37d6,  0x14},
    {0x37d7,  0x20}, 
    {0x37d8,  0x04}, 
    {0x37d9,  0x00}, 
    {0x37da,  0x00}, 
    {0x37de,  0x02}, 
    {0x37df,  0x00}, 
    {0x37e0,  0x15}, 
    {0x37e1,  0x02}, 
    {0x37e2,  0x04}, 
    {0x37e3,  0x18}, 
    {0x37e4,  0x07}, 
    {0x37e5,  0x15}, 
    {0x37e6,  0x07}, 
    {0x37e7,  0x15}, 
    {0x37e8,  0x07}, 
    {0x37e9,  0x1a},
    {0x37eb,  0x04}, 
    {0x37ec,  0x04}, 
    {0x37ed,  0x07}, 
    {0x37ee,  0x01}, 
    {0x37f0,  0x07}, 
    {0x37f1,  0x01}, 
    {0x37f2,  0x07}, 
    {0x37f3,  0x01}, 
    {0x37f6,  0x14}, 
    {0x37f7,  0x01}, 
    {0x37f8,  0x28}, 
    {0x37f9,  0x02}, 
    {0x37fa,  0x02}, 
    {0x37fb,  0x02}, 
    {0x37fc,  0x00}, 
    {0x37fd,  0x01}, 
    {0x37fe,  0x01}, 
    {0x37ff,  0x01}, 
    {0x3800,  0x00}, 
    {0x3801,  0x00}, 
    {0x3802,  0x00}, 
    {0x3803,  0x00}, 
    {0x3804,  0x12}, 
    {0x3805,  0x5f}, 
    {0x3806,  0x0c}, 
    {0x3807,  0x43}, 
    {0x3808,  0x12}, 
    {0x3809,  0x30}, 
    {0x380a,  0x0d}, 
    {0x380b,  0xa8}, 
    {0x380c,  0x02}, 
    {0x380d,  0xd9}, 
    {0x380e,  0x0e}, 
    {0x380f,  0x77}, 
    {0x3810,  0x00}, 
    {0x3811,  0x10}, 
    {0x3812,  0x00}, 
    {0x3813,  0x00}, 
    {0x3814,  0x11}, 
    {0x3815,  0x11}, 
    {0x3816,  0x01}, 
    {0x3817,  0x10}, 
    {0x3818,  0x01}, 
    {0x3819,  0x00}, 
    {0x3820,  0x00}, 
    {0x3821,  0x04}, 
    {0x3822,  0x00}, 
    {0x3823,  0x00}, 
    {0x382a,  0x01}, 
    {0x383d,  0x3f}, 
    {0x383e,  0x0d}, 
    {0x3857,  0x00}, 
    {0x3f01,  0x12}, 
    {0x3d85,  0x0b}, 
    {0x3d8c,  0x77}, 
    {0x3d8d,  0xa0}, 
    {0x4009,  0x02}, 
    {0x4010,  0x28}, 
    {0x4011,  0x01}, 
    {0x4012,  0x3d}, 
    {0x4015,  0x04}, 
    {0x4016,  0x1b}, 
    {0x4017,  0x08},
    {0x4018,  0x0f}, 
    {0x401a,  0x40}, 
    {0x401d,  0x10}, 
    {0x401e,  0x01}, 
    {0x401f,  0x80}, 
    {0x4020,  0x04}, 
    {0x4021,  0x00}, 
    {0x4022,  0x04}, 
    {0x4023,  0x00}, 
    {0x4024,  0x04}, 
    {0x4025,  0x00}, 
    {0x4026,  0x04}, 
    {0x4027,  0x00}, 
    {0x4028,  0x00}, 
    {0x4056,  0x25}, 
    {0x4057,  0x10}, 
    {0x4502,  0x00}, 
    {0x4504,  0x02}, 
    {0x4510,  0x18}, 
    {0x4640,  0x00}, 
    {0x4641,  0x28}, 
    {0x4643,  0x08}, 
    {0x4645,  0x04}, 
    {0x4800,  0x80}, 
    {0x4809,  0x19}, 
    {0x480e,  0x0a}, 
    {0x4813,  0x98}, 
    {0x4837,  0x0a}, 
    {0x4850,  0x0d}, 
    {0x4855,  0x4c},
    {0x4856,  0x0a}, 
    {0x4a00,  0x10}, 
    {0x4d00,  0x03}, 
    {0x4d01,  0xb2}, 
    {0x4d02,  0xbc}, 
    {0x4d03,  0x8d}, 
    {0x4d04,  0x82}, 
    {0x4d05,  0xcd}, 
    {0x5000,  0x0b},
    {0x5001,  0x4b}, 
    {0x5002,  0x15}, 
    {0x5004,  0x00}, 
    {0x5005,  0x40}, 
    {0x501e,  0x00}, 
    {0x5038,  0x40}, 
    {0x5081,  0x80}, 
    {0x5180,  0x00}, 
    {0x5181,  0x10}, 
    {0x5182,  0x07}, 
    {0x5183,  0x8f}, 
    {0x5200,  0x6f}, 
    {0x5820,  0xc5}, 
    {0x5824,  0x18}, 
    {0x5825,  0x08}, 
    {0x5826,  0x08}, 
    {0x5827,  0x18}, 
    {0x5851,  0x05}, 
    {0x5860,  0x00}, 
    {0x58cb,  0x03}, 
    {0x5bd0,  0x41}, 
    {0x5bd1,  0x02}, 
    {0x5bda,  0x00}, 
    {0x5bdb,  0x00}, 
    {0x5bdc,  0x00}, 
    {0x5bd2,  0x00}, 
    {0x5bd3,  0x6f}, 
    {0x5bd4,  0x00}, 
    {0x5bd5,  0x94}, 
    {0x5bdd,  0x00}, 
    {0x5c4b,  0x00}, 
    {0x5c11,  0x01}, 
    {0x5c12,  0x00}, 
    {0x5c13,  0x00}, 
    {0x5c14,  0x00}, 
    {0x5c15,  0x00}, 
    {0x5c16,  0x02}, 
    {0x5c17,  0x00}, 
    {0x5c18,  0x00}, 
    {0x5c19,  0x00}, 
    {0x5c1a,  0x00}, 
    {0x5c1b,  0x00}, 
    {0x5c1c,  0x00}, 
    {0x5c1d,  0x00}, 
    {0x5c1e,  0x00}, 
    {0x5c1f,  0x00}, 
    {0x5c20,  0x00}, 
    {0x5c2e,  0x08}, 
    {0x5c30,  0x04}, 
    {0x5c31,  0x12}, 
    {0x5c32,  0x40}, 
    {0x5c33,  0x0d}, 
    {0x5c34,  0xc0}, 
    {0x5c3f,  0x00}, 
    {0x5c40,  0x00}, 
    {0x5c41,  0x00}, 
    {0x5c42,  0x00}, 
    {0x5c43,  0x12}, 
    {0x5c44,  0x40}, 
    {0x5c45,  0x0d}, 
    {0x5c46,  0xc0}, 
    {0x5c0e,  0x11}, 
    {0x5c21,  0x10}, 
    {0x5c22,  0x10}, 
    {0x5c23,  0x02}, 
    {0x5c24,  0x0a}, 
    {0x5c25,  0x06}, 
    {0x5c26,  0x0e}, 
    {0x5c27,  0x02}, 
    {0x5c28,  0x02}, 
    {0x5c29,  0x0a}, 
    {0x5c2a,  0x0a}, 
    {0x5c2b,  0x01}, 
    {0x5c2c,  0x00}, 
    {0x5c35,  0x03}, 
    {0x5c36,  0x03}, 
    {0x5c37,  0x03}, 
    {0x5c38,  0x03}, 
    {0x5d00,  0xff}, 
    {0x5d01,  0x07}, 
    {0x5d02,  0x80}, 
    {0x5d03,  0x44}, 
    {0x5d05,  0xfc}, 
    {0x5d06,  0x0b}, 
    {0x5d07,  0x08}, 
    {0x5d08,  0x10}, 
    {0x5d09,  0x10}, 
    {0x5d0a,  0x02}, 
    {0x5d0b,  0x0a}, 
    {0x5d0c,  0x06}, 
    {0x5d0d,  0x0e}, 
    {0x5d0e,  0x02}, 
    {0x5d0f,  0x02},
    {0x5d10,  0x0a}, 
    {0x5d11,  0x0a}, 
    {0x5d12,  0x01}, 
    {0x5d13,  0x00}, 
    {0x5d15,  0x10}, 
    {0x5d16,  0x10}, 
    {0x5d17,  0x10}, 
    {0x5d18,  0x10}, 
    {0x5d1a,  0x10}, 
    {0x5d1b,  0x10}, 
    {0x5d1c,  0x10}, 
    {0x5d1d,  0x10}, 
    {0x5d1e,  0x04}, 
    {0x5d1f,  0x04}, 
    {0x5d20,  0x04}, 
    {0x5d27,  0x64}, 
    {0x5d28,  0xc8}, 
    {0x5d29,  0x96}, 
    {0x5d2a,  0xff}, 
    {0x5d2b,  0xc8}, 
    {0x5d2c,  0xff}, 
    {0x5d2d,  0x04}, 
    {0x5d34,  0x00},
    {0x5d35,  0x08}, 
    {0x5d36,  0x00}, 
    {0x5d37,  0x04}, 
    {0x5d38,  0x12}, 
    {0x5d39,  0x40}, 
    {0x5d3a,  0x0d}, 
    {0x5d3b,  0xc0}, 
    {0x5d4a,  0x00}, 
    {0x5d46,  0x00}, 
    {0x5d47,  0x00}, 
    {0x5d48,  0x00}, 
    {0x5d49,  0x00}, 
    {0x5d4c,  0x00},
#if 0
	{0x5900,	0x40},
{0x5901,	0x40},
{0x5902,	0x40},
{0x5903,	0x40},
{0x5904,	0x40},
{0x5905, 0x40},
{0x5906,	0x40},
{0x5907,	0x40},
{0x5908,	0x40},
{0x5909,	0x40},
{0x590a,	0x40},
{0x590b,	0x40},
{0x590c,	0x40},
{0x590d,	0x40},
{0x590e,	0x40},
{0x590f,	0x40},
{0x5910,	0x40},
{0x5911,	0x40},
{0x5912,	0x40},
{0x5913,	0x40},
{0x5914,	0x40},
{0x5915,	0x40},
{0x5916,	0x40},
{0x5917,	0x40},
{0x5918,	0x40},
{0x5919,	0x40},
{0x591a,	0x40},
{0x591b,	0x40},
{0x591c,	0x40},
{0x591d,	0x40},
{0x591e,	0x40},
{0x591f,	0x40},
{0x5920,	0x40},
{0x5921,	0x40},
{0x5922,	0x40},
{0x5923,	0x40},
{0x5924,	0x40},
{0x5925,	0x40},
{0x5926,	0x40},
{0x5927,	0x40},
{0x5928,	0x40},
{0x5929,	0x40},
{0x592a,	0x40},
{0x592b,	0x40},
{0x592c,	0x40},
{0x592d,	0x40},
{0x592e,	0x40},
{0x592f,	0x40},
{0x5930,	0x40},
{0x5931,	0x40},
{0x5932,	0x40},
{0x5933,	0x40},
{0x5934,	0x40},
{0x5935,	0x40},
{0x5936,	0x40},
{0x5937,	0x40},
{0x5938,	0x40},
{0x5939,	0x40},
{0x593a,	0x40},
{0x593b, 0x40},
{0x593c,	0x40},
{0x593d,	0x40},
{0x593e,	0x40},
{0x593f,	0x40},
{0x5940,	0x40},
{0x5941,	0x40},
{0x5942,	0x40},
{0x5943,	0x40},
{0x5944,	0x40},
{0x5945,	0x40},
{0x5946,	0x40},
{0x5947,	0x40},
{0x5948,	0x40},
{0x5949,	0x40},
{0x594a,	0x40},
{0x594b,	0x40},
{0x594c,	0x40},
{0x594d,	0x40},
{0x594e,	0x40},
{0x594f,	0x40},
{0x5950,	0x40},
{0x5951,	0x40},
{0x5952,	0x40},
{0x5953,	0x40},
{0x5954,	0x40},
{0x5955,	0x40},
{0x5956,	0x40},
{0x5957,	0x40},
{0x5958,	0x40},
{0x5959,	0x40},

#endif

};

static const SENSOR_REG_T ov16e10_preview_setting[] = {
	//Sensor Information////////////////////////////
	//Sensor	  : xxx
	//Date		  : 2017-04-06                       
	//Customer        : SPRD_validation
	//Image size	  : 1632x1224
	//MCLK/PCLK	  : 24MHz /288Mhz
	//MIPI speed(Mbps): 360Mbps x 4Lane
	//Frame Length	  : 2492
	//Line Length 	  : 3800
	//line Time       :13194 
	//Max Fps 	  : 30.00fps
	//Pixel order 	  : Green 1st (=GB)
	//X/Y-flip        : X-flip
	//BLC offset	    : 64code   
	//Firmware Ver.   : v1.0
	////////////////////////////////////////////////
	//#if 0
{0x3501, 0x0e},
{0x3502,	0x66},
{0x3508,	0x01},
{0x3509,	0x00},
{0x3664,	0x43},
{0x3709,	0x9b},
{0x3714,	0x67},
{0x374c,	0x00},
{0x374d,	0x17},
{0x374e,	0x2a},
{0x3752,	0x00},
{0x3753,	0x00},
{0x3754,	0xee},
{0x3781,	0x00},
{0x3798,	0x00},
{0x37c8,	0x02},
{0x37cc,	0xf0},
{0x37cd,	0x01},
{0x37d9,	0x00},
{0x3808,	0x09},
{0x3809,	0x00},
{0x380a,	0x06},
{0x380b,	0xc0},
{0x380c,	0x02},
{0x380d,	0xd9},
{0x380e,	0x0e},
{0x380f,	0x76},
{0x3814,	0x11},
{0x3815,	0x11},
{0x3820,	0x00},
{0x3822,	0x11},
{0x383d,	0xff},
{0x383e,	0x0d},
{0x4015,	0x04},
{0x4016,	0x1b},
{0x4017,	0x08},
{0x4018,	0x0f},
{0x4641,	0x24},
{0x480e,	0x0a},
{0x4813,	0x98},
{0x5000,	0x2b},
{0x5001,	0x4b},
{0x5005,	0x40},
{0x5820,	0xc3},
{0x5bd0,	0x41},
{0x5bd4,	0x00},
{0x5bd5,	0x94},
{0x5bdd,	0x00},
{0x5c22,	0x10},
{0x5c27,	0x02},
{0x5c28,	0x02},
{0x5c29,	0x0a},
{0x5c2a,	0x0a},
{0x5c30,	0x04},
{0x5c33,	0x0d},
{0x5c34,	0xc0},
{0x5c4b,	0x00},
{0x5d00,	0xff},
{0x5d01,	0x07},
{0x5d09,	0x10},
{0x5d0e,	0x02},
{0x5d0f,	0x02},
{0x5d10,	0x0a},
{0x5d11,	0x0a},
{0x5d37,	0x04},
{0x5d3a,	0x0d},
{0x5d3b,	0xc0},
{0x5d49,	0x00},
{0x5d4a,	0x00},
{0x350a,	0x01},
{0x350b,	0x00},
{0x350c,	0x00},
//#endif
	
};

static const SENSOR_REG_T ov16e10_snapshot_setting[] = {
	//Sensor Information////////////////////////////
	//Sensor	  : xxx                            
	//Date		  : 2017-04-06                       
	//Customer        : SPRD_validation                      
	//Image size	  : 3264x2448                     
	//MCLK/PCLK	  : 24MHz /288Mhz                   
	//MIPI speed(Mbps): 720Mbps x 4Lane             
	//Frame Length	  : 2492                        
	//Line Length 	  : 3800
	//line Time       :13194                         
	//Max Fps 	  : 30.00fps                                              
	//Pixel order 	  : Green 1st (=GB)             
	//X/Y-flip        : X-flip  
	//BLC offset	    : 64code                       
	//Firmware Ver.   : v1.0                        
	////////////////////////////////////////////////
//#if 0
{0x3501, 0x0e},
{0x3502,	0x66},
{0x3508,	0x01},
{0x3509,	0x00},
{0x3664,	0x43},
{0x3709,	0x9b},
{0x3714,	0x67},
{0x374c,	0x00},
{0x374d,	0x17},
{0x374e,	0x2a},
{0x3752,	0x00},
{0x3753,	0x00},
{0x3754,	0xee},
{0x3781,	0x00},
{0x3798,	0x00},
{0x37c8,	0x02},
{0x37cc,	0xf0},
{0x37cd,	0x01},
{0x37d9,	0x00},
{0x3808,	0x12},
{0x3809,	0x00},
{0x380a,	0x0d},
{0x380b,	0x80},
{0x380c,	0x02},
{0x380d,	0xd9},
{0x380e,	0x0e},
{0x380f,	0x76},
{0x3814,	0x11},
{0x3815,	0x11},
{0x3820,	0x00},
{0x3822,	0x00},
{0x383d,	0x3f},
{0x383e,	0x0d},
{0x4015,	0x04},
{0x4016,	0x1b},
{0x4017,	0x08},
{0x4018,	0x0f},
{0x4641,	0x24},
{0x480e,	0x0a},
{0x4813,	0x98},
{0x5000,	0x0b},
{0x5001,	0x4b},
{0x5005,	0x40},
{0x5820,	0xc5},
{0x5bd0,	0x41},
{0x5bd4,	0x00},
{0x5bd5,	0x94},
{0x5bdd,	0x00},
{0x5c22,	0x10},
{0x5c27,	0x02},
{0x5c28,	0x02},
{0x5c29,	0x0a},
{0x5c2a,	0x0a},
{0x5c30,	0x04},
{0x5c33,	0x0d},
{0x5c34,	0xc0},
{0x5c4b,	0x00},
{0x5d00,	0xff},
{0x5d01,	0x07},
{0x5d09,	0x10},
{0x5d0e,	0x02},
{0x5d0f,	0x02},
{0x5d10,	0x0a},
{0x5d11,	0x0a},
{0x5d37,	0x04},
{0x5d3a,	0x0d},
{0x5d3b,	0xc0},
{0x5d49,	0x00},
{0x5d4a,	0x00},
{0x350a,	0x01},
{0x350b,	0x00},
{0x350c,	0x00},
//#endif

};

static const SENSOR_REG_T ov16e10_video_setting[] = {
	//Sensor Information////////////////////////////
	//Sensor	  : xxx
	//Date		  : 2017-04-06                       
	//Customer        : SPRD_validation
	//Image size	  : 1280x720
	//MCLK/PCLK	  : 24MHz /288Mhz
	//MIPI speed(Mbps): 360Mbps x 4Lane
	//Frame Length	  :  842
	//Line Length 	  : 3800
	//line Time       :13194 
	//Max Fps 	  : 90.00fps
	//Pixel order 	  : Green 1st (=GB)
	//X/Y-flip        : X-flip
	//BLC offset	    : 64code   
	//Firmware Ver.   : v1.0
	////////////////////////////////////////////////
	//#if 0
{0x3501, 0x04},
{0x3502,	0x60},
{0x3508,	0x04},
{0x3509,	0x00},
{0x3664,	0x00},
{0x3709,	0x80},
{0x3714,	0x64},
{0x374c,	0x08},
{0x374d,	0x12},
{0x374e,	0x0a},
{0x3752,	0x08},
{0x3753,	0x0f},
{0x3754,	0x66},
{0x3781,	0x3b},
{0x3798,	0x84},
{0x37c8,	0x32},
{0x37cc,	0xff},
{0x37cd,	0x32},
{0x37d9,	0x10},
{0x3808,	0x07},
{0x3809,	0x80},
{0x380a,	0x04},
{0x380b,	0x38},
{0x380c,	0x02},
{0x380d,	0x52},
{0x380e,	0x04},
{0x380f,	0x70},
{0x3814,	0x11},
{0x3815,	0x31},
{0x3820,	0x21},
{0x3822,	0x01},
{0x383d,	0x7f},
{0x383e,	0x0d},
{0x4015,	0x02},
{0x4016,	0x0d},
{0x4017,	0x04},
{0x4018,	0x07},
{0x4641,	0x24},
{0x480e,	0x02},
{0x4813,	0x90},
{0x5000,	0x2b},
{0x5001,	0x4b},
{0x5005,	0x00},
{0x5820,	0xc1},
{0x5bd0,	0x09},
{0x5bd4,	0x01},
{0x5bd5,	0x28},
{0x5bdd,	0x00},
{0x5c22,	0x08},
{0x5c27,	0x00},
{0x5c28,	0x00},
{0x5c29,	0x04},
{0x5c2a,	0x04},
{0x5c30,	0x02},
{0x5c33,	0x06},
{0x5c34,	0xe0},
{0x5c4b,	0x00},
{0x5d00,	0x43},
{0x5d01,	0x00},
{0x5d09,	0x08},
{0x5d0e,	0x00},
{0x5d0f,	0x00},
{0x5d10,	0x04},
{0x5d11,	0x04},
{0x5d37,	0x02},
{0x5d3a,	0x06},
{0x5d3b,	0xe0},
{0x5d49,	0x00},
{0x5d4a,	0x00},
{0x350a,	0x01},
{0x350b,	0x00},
{0x350c,	0x00},
	//#endif

};




static struct sensor_res_tab_info s_ov16e10_resolution_tab_raw[VENDOR_NUM] = {
	{
      .module_id = MODULE_SUNNY,
      .reg_tab = {
        {ADDR_AND_LEN_OF_ARRAY(ov16e10_init_setting), PNULL, 0,
        .width = 0, .height = 0,
        .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},

	 {ADDR_AND_LEN_OF_ARRAY(ov16e10_video_setting), PNULL, 0,
        .width = VIDEO_WIDTH, .height = VIDEO_HEIGHT,
        .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},
		
        {ADDR_AND_LEN_OF_ARRAY(ov16e10_preview_setting), PNULL, 0,
        .width = PREVIEW_WIDTH, .height = PREVIEW_HEIGHT,
        .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW},

        {ADDR_AND_LEN_OF_ARRAY(ov16e10_snapshot_setting), PNULL, 0,
        .width = SNAPSHOT_WIDTH, .height = SNAPSHOT_HEIGHT,
        .xclk_to_sensor = EX_MCLK, .image_format = SENSOR_IMAGE_FORMAT_RAW}
		}
	}

	/*If there are multiple modules,please add here*/
};

static SENSOR_TRIM_T s_ov16e10_resolution_trim_tab[VENDOR_NUM] = {
	{
     .module_id = MODULE_SUNNY,
     .trim_info = {
       {0, 0, 0, 0, 0, 0, 0, {0, 0, 0, 0}},
	   
	   {.trim_start_x = VIDEO_TRIM_X, .trim_start_y = VIDEO_TRIM_Y,
        .trim_width = VIDEO_TRIM_W,   .trim_height = VIDEO_TRIM_H,
        .line_time = VIDEO_LINE_TIME, .bps_per_lane = VIDEO_MIPI_PER_LANE_BPS,
        .frame_line = VIDEO_FRAME_LENGTH,
        .scaler_trim = {.x = VIDEO_TRIM_X, .y = VIDEO_TRIM_Y, .w = VIDEO_TRIM_W, .h = VIDEO_TRIM_H}},
	   
	   {.trim_start_x = PREVIEW_TRIM_X, .trim_start_y = PREVIEW_TRIM_Y,
        .trim_width = PREVIEW_TRIM_W,   .trim_height = PREVIEW_TRIM_H,
        .line_time = PREVIEW_LINE_TIME, .bps_per_lane = PREVIEW_MIPI_PER_LANE_BPS,
        .frame_line = PREVIEW_FRAME_LENGTH,
        .scaler_trim = {.x = PREVIEW_TRIM_X, .y = PREVIEW_TRIM_Y, .w = PREVIEW_TRIM_W, .h = PREVIEW_TRIM_H}},
       
	   {
        .trim_start_x = SNAPSHOT_TRIM_X, .trim_start_y = SNAPSHOT_TRIM_Y,
        .trim_width = SNAPSHOT_TRIM_W,   .trim_height = SNAPSHOT_TRIM_H,
        .line_time = SNAPSHOT_LINE_TIME, .bps_per_lane = SNAPSHOT_MIPI_PER_LANE_BPS,
        .frame_line = SNAPSHOT_FRAME_LENGTH,
        .scaler_trim = {.x = SNAPSHOT_TRIM_X, .y = SNAPSHOT_TRIM_Y, .w = SNAPSHOT_TRIM_W, .h = SNAPSHOT_TRIM_H}},
		}
	}
    /*If there are multiple modules,please add here*/

};

static SENSOR_REG_T ov16e10_shutter_reg[] = {
    {0x3501, 0x0e}, {0x3502, 0x66},
};

static struct sensor_i2c_reg_tab ov16e10_shutter_tab = {
    .settings = ov16e10_shutter_reg, 
	.size = ARRAY_SIZE(ov16e10_shutter_reg),
};

static SENSOR_REG_T ov16e10_again_reg[] = {
    {0x3208, 0x00}, {0x3508, 0x01}, {0x3509, 0x00},
    {0x3208, 0x10}, {0x3208, 0xa0},
	//{0x3508, 0x02}, {0x3509, 0x00}, 
};

static struct sensor_i2c_reg_tab ov16e10_again_tab = {
    .settings = ov16e10_again_reg, 
	.size = ARRAY_SIZE(ov16e10_again_reg),
};

static SENSOR_REG_T ov16e10_dgain_reg[] = {
   
};

static struct sensor_i2c_reg_tab ov16e10_dgain_tab = {
    .settings = ov16e10_dgain_reg, 
	.size = ARRAY_SIZE(ov16e10_dgain_reg),
};

static SENSOR_REG_T ov16e10_frame_length_reg[] = {
    {0x380e, 0x0e}, {0x380f, 0x76},
};

static struct sensor_i2c_reg_tab ov16e10_frame_length_tab = {
    .settings = ov16e10_frame_length_reg,
    .size = ARRAY_SIZE(ov16e10_frame_length_reg),
};

static struct sensor_aec_i2c_tag ov16e10_aec_info = {
    .slave_addr = (I2C_SLAVE_ADDR >> 1),
    .addr_bits_type = SENSOR_I2C_REG_16BIT,
    .data_bits_type = SENSOR_I2C_VAL_8BIT,
    .shutter = &ov16e10_shutter_tab,
    .again = &ov16e10_again_tab,
    .dgain = &ov16e10_dgain_tab,
    .frame_length = &ov16e10_frame_length_tab,
};

static SENSOR_STATIC_INFO_T s_ov16e10_static_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .static_info = {
        .f_num = 180,
        .focal_length = 354,
        .max_fps = 120,
        .max_adgain = 8,
        .ois_supported = 0,
        .pdaf_supported = 2,
        .exp_valid_frame_num = 1,
        .clamp_level = 64,
        .adgain_valid_frame_num = 1,
        .fov_info = {{4.614f, 3.444f}, 3.74f}}
    }
    /*If there are multiple modules,please add here*/
};


static SENSOR_MODE_FPS_INFO_T s_ov16e10_mode_fps_info[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
       {.is_init = 0,
         {{SENSOR_MODE_COMMON_INIT, 0, 1, 0, 0},
         {SENSOR_MODE_PREVIEW_ONE, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_ONE_FIRST, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_ONE_SECOND, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_ONE_THIRD, 0, 1, 0, 0},
         {SENSOR_MODE_PREVIEW_TWO, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_TWO_FIRST, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_TWO_SECOND, 0, 1, 0, 0},
         {SENSOR_MODE_SNAPSHOT_TWO_THIRD, 0, 1, 0, 0}}}
    }
    /*If there are multiple modules,please add here*/
};


static struct sensor_module_info s_ov16e10_module_info_tab[VENDOR_NUM] = {
    {.module_id = MODULE_SUNNY,
     .module_info = {
       .major_i2c_addr = I2C_SLAVE_ADDR >> 1,
       .minor_i2c_addr = I2C_SLAVE_ADDR >> 1,

      .i2c_burst_mode = SENSOR_I2C_BURST_REG16_VAL8,

         .reg_addr_value_bits = SENSOR_I2C_REG_16BIT | SENSOR_I2C_VAL_8BIT |
                                SENSOR_I2C_FREQ_400,

         .avdd_val = SENSOR_AVDD_2800MV,
         .iovdd_val = SENSOR_AVDD_1800MV,
         .dvdd_val = SENSOR_AVDD_1200MV,

         .image_pattern = SENSOR_IMAGE_PATTERN_RAWRGB_B,

         .preview_skip_num = 1,
         .capture_skip_num = 1,
         .flash_capture_skip_num = 6,
         .mipi_cap_skip_num = 0,
         .preview_deci_num = 0,
         .video_preview_deci_num = 0,

         .threshold_eb = 0,
         .threshold_mode = 0,
         .threshold_start = 0,
         .threshold_end = 0,

         .sensor_interface = {
              .type = SENSOR_INTERFACE_TYPE_CSI2,
              .bus_width = LANE_NUM,
              .pixel_width = RAW_BITS,
              .is_loose = 0,
          },
         .change_setting_skip_num = 1,
         .horizontal_view_angle = 65,
         .vertical_view_angle = 51
      }
    }

/*If there are multiple modules,please add here*/
};

static struct sensor_ic_ops s_ov16e10_ops_tab;
struct sensor_raw_info *s_ov16e10_mipi_raw_info_ptr = PNULL;


/*==============================================================================
 * Description:
 * sensor all info
 * please modify this variable acording your spec
 *============================================================================*/
SENSOR_INFO_T g_ov16e10_mipi_raw_info = {
    .hw_signal_polarity = SENSOR_HW_SIGNAL_PCLK_P | SENSOR_HW_SIGNAL_VSYNC_P |
                          SENSOR_HW_SIGNAL_HSYNC_P,
    .environment_mode = SENSOR_ENVIROMENT_NORMAL | SENSOR_ENVIROMENT_NIGHT,
    .image_effect = SENSOR_IMAGE_EFFECT_NORMAL |
                    SENSOR_IMAGE_EFFECT_BLACKWHITE | SENSOR_IMAGE_EFFECT_RED |
                    SENSOR_IMAGE_EFFECT_GREEN | SENSOR_IMAGE_EFFECT_BLUE |
                    SENSOR_IMAGE_EFFECT_YELLOW | SENSOR_IMAGE_EFFECT_NEGATIVE |
                    SENSOR_IMAGE_EFFECT_CANVAS,

    .wb_mode = 0,
    .step_count = 7,
    .reset_pulse_level = SENSOR_LOW_PULSE_RESET,
    .reset_pulse_width = 50,
    .power_down_level = SENSOR_LOW_LEVEL_PWDN,
    .identify_count = 1,
    .identify_code =
        {{ .reg_addr = ov16e10_PID_ADDR, 
        .reg_value = ov16e10_PID_VALUE},
         { .reg_addr = ov16e10_VER_ADDR, 
         .reg_value = ov16e10_VER_VALUE}},

    .source_width_max = SNAPSHOT_WIDTH,
    .source_height_max = SNAPSHOT_HEIGHT,
    .name = (cmr_s8 *)SENSOR_NAME,
    .image_format = SENSOR_IMAGE_FORMAT_RAW,

    .module_info_tab = s_ov16e10_module_info_tab,
    .module_info_tab_size = ARRAY_SIZE(s_ov16e10_module_info_tab),

    .resolution_tab_info_ptr = s_ov16e10_resolution_tab_raw,
    .sns_ops = &s_ov16e10_ops_tab,
    .raw_info_ptr = &s_ov16e10_mipi_raw_info_ptr,

    .video_tab_info_ptr = NULL,
    .sensor_version_info = (cmr_s8 *)"ov16e10_v1",
};

#endif
